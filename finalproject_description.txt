Functionality:
This game allows for two players to play against each other with Pokémon of their choice. When the game begins, music begins to play, and both players are able to select their Pokémon from a grid displaying each Pokémon's image. On this screen we also see the mute and pause buttons, the functional difference being that pause prevents buttons from being pressed and pauses the music while mute allows the players to continue playing the game and only turns game volume to 0. Once each player has chosen a Pokémon, another screen appears where Pokémon are able to fight. This screen allows for players to choose their moves, and displays each Pokémon's health. Once both players have chosen an attack for their pokemon to perform, the damage is calculated and applied. When a Pokémon has been defeated, a finishing screen displays the winner and allows the player to restart the program or quit the game altogether. How each required portion of the project was completed is summarized below:
- Keyboard interactivity is implemented as an alternative to the GUI buttons on the fight screen, and if a player hits the escape key then the entire game ends
- 3 GUI systems are implemented for this project: the selection screen for choosing Pokémon, the fight screen for allowing the Pokémon to fight, and the end screen for allowing either the game to restart or quit.
- An animation hierarchy was integrated into this project through the aesthetics of the end screen. Here, the winning Pokémon is surrounded by fireworks that rotate around the Pokémon as the Pokémon and the fireworks bounce around the screen.
- Data input was achieved by reading two .csv files- one with Pokémon information and the other with Pokémon type information.
- Sound was implemented into this project by including music, which changes between the selection and fight screens. The sound is mutable by a GUI button, and also stops when the game is paused.

Classes:
- Button - class for all buttons, handles mouseOver highlight.
- Card - each pokemon's character card on the selection screen.
- EndScreen - showing winner, play again/exit Functionality.
- FightScreen - calculates move damage, drawing the fighting screen.
- HealthBar - displays health bar in accordance with current player health.
- Pause - displays the play/pause button in upper left corner, updates given status.
- Pokemon - class for all pokemon, stores all of their stats and information about their moves.
- SelectionScreen - allows player 1 to select one of the nine pokemon, then player 2.
- Sound - handles volume management for game music.

Challenges:
- Attack animations were planned, but due to the structure of our code, were unable to be feasibly implemented.
- We couldn't figure out how to use animation hierarchies with PImages, so we had to make a .svg copy of each of our pokemon .pngs for the ending screen animations.
- The sound files take so long to load that we had to implement a loading screen.
- Game balancing is quite difficult.

Responsibilities:

# Landry Luker:
-Music/Sound
-Button Class
-Heathbar
-Pause Class
-mousePressed()

# Mehmet Zenginerler:
-setup()
-draw()
-Pokemon Class
-Card Class
-Data Pipeline - from .csv to classes
-Selection Screen
	-Backend - uploading/selecting/sending pokemons
	-Pokemon Grid
	-Background Image
-Button Class

# Claudia Wang:
-Design
-Art
-Animation Hierarchies
-Background Image
-EndScreen Class

# Katherine Hackworth:
-Fight Screen
-keyPressed()
-Game Balance
-Text Documents (i.e., this + README.md)

Notes:
- Pokemon is a trademark of The Pokemon Company.
- Street Fighter is a trademark of Capcom Co., Ltd.
- Assets belonging to the above companies fall under the Fair Use Exemption of U.S. Copyright law.
- The code and assets bundled are to be used for educational purposes only.